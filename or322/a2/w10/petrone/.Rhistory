Rnum_set[i] = R
}
# Transform random numbers to random variables from exp(lambda = 13/60) distrubution
lambda = 60/13 # arrivals/hour
Rvar_set = qexp(Rnum_set, lambda)
# INTER arrival time
Rvar_set
# INTER arrival time
Rvar_set[1] + Rvar_set[2]
Rvar_arrival = c(0)
# arrival time
for (int i in 2:n)
# arrival time
for (i in 2:n)
# arrival time
for (i in 2:n)Rvar_arrival = Rvar_arrival[i-1]+Rvar_set[i]
Rvar_arrival
Rvar_arrival = c(0)
Rvar_arrival
# arrival time
for (i in 2:n)Rvar_arrival[i] = Rvar_arrival[i-1]+Rvar_set[i]
Rvar_arrival
Rvar_arrival = c(0)
# arrival time
for (i in 1:n)Rvar_arrival[i] = Rvar_arrival[i]+Rvar_set[i+1]
Rvar_arrival
Rvar_arrival[2] = Rvar_set[1]
Rvar_arrival = c(0)
Rvar_arrival[2] = Rvar_set[1]
Rvar_arrival
# arrival time
for (i in 2:n)Rvar_arrival[i] = Rvar_arrival[i-1]+Rvar_set[i]
Rvar_arrival
#Question 4 ###################################################################
# Generate a list of random numbers
x = 2000001
a = 7^5
c = 101010
m = 2^31 - 1
n = 35*200
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Estabilish an interval for random numbers for each random outcome
ub_i = c(0.20,1) # excluding
lb_i = c(0, 0.20) # including
# Generate random variable outcomes
Rvar_set=rep(0,2)
#Question 4 ###################################################################
# Generate a list of random numbers
x = 2000001
a = 7^5
c = 101010
m = 2^31 - 1
n = 35*200
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Estabilish an interval for random numbers for each random outcome
ub_i = c(0.20,1) # excluding
lb_i = c(0, 0.20) # including
# Generate random variable outcomes
Rvar_set=rep(0, 200)
for (i in 1:200) {
for (j in 1:35) {
if (Rnum_set[j+(i-1)*35]>= lb_i[1] && Rnum_set[j+(i-1)*35] < ub_i[1]){
Rvar_set[i] = Rvar_set[i]+1
}
if (Rnum_set[j+(i-1)*35]>= lb_i[2] && Rnum_set[j+(i-1)*35] < ub_i[2]){
Rvar_set[i] = Rvar_set[i]+1
}
}
}
Rvar_set
# Generate random variable outcomes
Rvar_set=rep(0, 200)
for (i in 1:200) {
for (j in 1:35) {
if (Rnum_set[j+(i-1)*35]>= lb_i[1] && Rnum_set[j+(i-1)*35] < ub_i[1]){
Rvar_set[i] = Rvar_set[i]+1
}
#if (Rnum_set[j+(i-1)*35]>= lb_i[2] && Rnum_set[j+(i-1)*35] < ub_i[2]){
#  Rvar_set[i] = Rvar_set[i]+1
#}
}
}
for (i in 1:n){
if (Rnum_set[i]>= lb_i[1] && Rnum_set[i] < ub_i[1]){
Rvar_set[1] = Rvar_set[1]+1
}
if (Rnum_set[i]>= lb_i[2] && Rnum_set[i] < ub_i[2]){
Rvar_set[2] = Rvar_set[2]+1
}
}
cat("Red sweets = ", Rvar_set[1], " and other = ", Rvar_set[2])
Rvar_set
# Generate random variable outcomes
Rvar_set=rep(0, 200)
for (i in 1:200) {
for (j in 1:35) {
if (Rnum_set[j+(i-1)*35]>= lb_i[1] && Rnum_set[j+(i-1)*35] < ub_i[1]){
Rvar_set[i] = Rvar_set[i]+1
}
#if (Rnum_set[j+(i-1)*35]>= lb_i[2] && Rnum_set[j+(i-1)*35] < ub_i[2]){
#  Rvar_set[i] = Rvar_set[i]+1
#}
}
}
Rvar_set
#Question 4 ###################################################################
# Generate a list of random numbers
x = 2000001
a = 7^5
c = 101010
m = 2^31 - 1
n = 35*200
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Estabilish an interval for random numbers for each random outcome
ub_i = c(0.20,1) # excluding
lb_i = c(0, 0.20) # including
# Generate random variable outcomes
Rvar_set=rep(0, 200)
for (i in 1:200) {
for (j in 1:35) {
if (Rnum_set[j+(i-1)*35]>= lb_i[1] && Rnum_set[j+(i-1)*35] < ub_i[1]){
Rvar_set[i] = Rvar_set[i]+1
}
}
}
Rvar_set
#Question 5 ###################################################################
# Generate a list of random numbers
x = 101010101
a = 7^5
c = 0
m = 2^31 - 1
n = 365
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Transform random numbers to random variables from poision(lambda) distribution
lambda = 17 #barges/day
Rvar_set = qpois(Rnum_set, lambda)
Rvar_set
#Question 4 ###################################################################
# Generate a list of random numbers
x = 2000001
a = 7^5
c = 101010
m = 2^31 - 1
n = 35*200
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Estabilish an interval for random numbers for each random outcome
ub_i = c(0.20,1) # excluding
lb_i = c(0, 0.20) # including
# Generate random variable outcomes
Rvar_set=rep(0, 200)
for (i in 1:200) {
for (j in 1:35) {
if (Rnum_set[j+(i-1)*35]>= lb_i[1] && Rnum_set[j+(i-1)*35] < ub_i[1]){
Rvar_set[i] = Rvar_set[i]+1
}
}
}
Rvar_set
mean(Rvar_set)
mean(Rvar_set)
#Question 5 ###################################################################
# Generate a list of random numbers
x = 101010101
a = 7^5
c = 0
m = 2^31 - 1
n = 365
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Transform random numbers to random variables from poision(lambda) distribution
lambda = 17 #barges/day
Rvar_set = qpois(Rnum_set, lambda)
mean(Rvar_set)
Rvar_set
#Question 3 ###################################################################
# Generate a list of random numbers
x = 1000000
a = 7^5
c = 100001
m = 2^31 - 1
n = 450
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Estabilish an interval for random numbers for each random outcome
ub_i = c(0.30,1) # excluding
lb_i = c(0, 0.30) # including
# Generate random variable outcomes
Rvar_set=c()
for (i in 1:n){
if (Rnum_set[i]>= lb_i[1] && Rnum_set[i] < ub_i[1]){
Rvar_set[i] = "B"
}
if (Rnum_set[i]>= lb_i[2] && Rnum_set[i] < ub_i[2]){
Rvar_set[i] = "S"
}
}
Rvar_set
mean(Rvar_set)
#Question 2 ###################################################################
# Generate a list of random numbers
x = 2000000
a = 7^5
c = 200000
m = 2^31 - 1
n = 710
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Transform random numbers to random variables from uniform(a,b) distrubution
a = 1.5 #minutes
b = 5 #minutes
get_uniform_var = function(R)return(a + (b-a)*R)
mean(Rvar_set)
#Question 2 ###################################################################
# Generate a list of random numbers
x = 2000000
a = 7^5
c = 200000
m = 2^31 - 1
n = 710
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Transform random numbers to random variables from uniform(a,b) distrubution
a = 1.5 #minutes
b = 5 #minutes
get_uniform_var = function(R)return(a + (b-a)*R)
Rvar_set = sapply(Rnum_set, get_uniform_var)
mean(Rvar_set)
Rvar_set
min(Rvar_set)
max(Rvar_set)
# Transform random numbers to random variables from exp(lambda = 13/60) distrubution
lambda = 20*1/60 # cust/min
lambda
# Transform random numbers to random variables from exp(lambda = 13/60) distrubution
lambda = 20/60 # cust/min
lambda
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
n = 101
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Transform random numbers to random variables from exp(lambda = 13/60) distrubution
lambda = 20/60 # cust/min
Rvar_set = qexp(Rnum_set, lambda)
# INTER arrival time
Rvar_set
# ARRIVAL times (cummulative)
Rvar_arrival = c(0)
Rvar_arrival[2] = Rvar_set[1]
for (i in 2:n)Rvar_arrival[i] = Rvar_arrival[i-1]+Rvar_set[i]
Rvar_arrival
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
n = 101
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Transform random numbers to random variables from exp(lambda = 13/60) distrubution
lambda = 20/60 # cust/min
Rvar_set = qexp(Rnum_set, lambda)
# INTER arrival time
Rvar_set
# ARRIVAL times (cummulative)
Rvar_arrival = c(0)
Rvar_arrival[2] = Rvar_set[1]
Rvar_arrival
for (i in 2:n)Rvar_arrival[i] = Rvar_arrival[i-1]+Rvar_set[i]
Rvar_arrival
# ARRIVAL times (cummulative)
Rvar_arrival = c(0)
Rvar_arrival[2] = Rvar_set[1]
for (i in 3:n)Rvar_arrival[i] = Rvar_arrival[i-1]+Rvar_set[i]
Rvar_arrival
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
n = 101
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Transform random numbers to random variables from exp(lambda = 13/60) distrubution
lambda = 20/60 # cust/min
Rvar_set = qexp(Rnum_set, lambda)
# INTER arrival time
Rvar_set
# ARRIVAL times (cummulative)
Rvar_arrival = c(0)
Rvar_arrival[2] = Rvar_set[1]
Rvar_arrival
for (i in 3:n)Rvar_arrival[i] = Rvar_arrival[i-1]+Rvar_set[i]
Rvar_arrival
# ARRIVAL times (cummulative)
Rvar_arrival = c(0)
Rvar_arrival[2] = Rvar_set[1]
Rvar_arrival
for (i in 2:n)Rvar_arrival[i+1] = Rvar_arrival[i-1]+Rvar_set[i]
Rvar_arrival
# ARRIVAL times (cummulative)
Rvar_arrival = c(0)
Rvar_arrival[2] = Rvar_set[1]
Rvar_arrival
for (i in 2:n)Rvar_arrival[i] = Rvar_arrival[i-1]+Rvar_set[i]
Rvar_arrival
# ARRIVAL times (cummulative)
Rvar_arrival = c()
Rvar_arrival[1] = 0
Rvar_arrival[2] = Rvar_set[1] + Rvar_arrival[1]
Rvar_arrival
for (i in 3:n)Rvar_arrival[i] = Rvar_arrival[i-1]+Rvar_set[i-1]
Rvar_arrival
Rvar_arrival[13]
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
x = (a*x + c)%%m
x
Rnum_set[1]
Rnum_set[10]
Rvar_set[9]
Rvar_set
Rvar_set[10]
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
n = 101
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Transform random numbers to random variables from exp(lambda = 13/60) distrubution
lambda = 20/60 # cust/min
Rvar_set = qexp(Rnum_set, lambda)
# INTER arrival time
Rvar_set
# ARRIVAL times (cummulative)
Rvar_arrival = c()
Rvar_arrival[1] = 0
Rvar_arrival[2] = Rvar_set[1] + Rvar_arrival[1]
for (i in 3:n)Rvar_arrival[i] = Rvar_arrival[i-1]+Rvar_set[i-1]
Rvar_arrival
Rvar_arrival[13]
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
x = (a*x + c)%%m
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
n = 101
(a*x + c)%%m
Rnum_set[10]
# INTER arrival time
Rvar_set
Rnum_set[11]
Rnum_set[10]
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
n = 101
(a*x + c)%%m
Rvar_set[11]
Rvar_set
Rvar_set[10]
Rvar_arrival[13]
Rvar_arrival
# INTER arrival time
Rvar_set
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
n = 101
(a*x + c)%%m
Rnum_set[10]
Rvar_set
Rvar_set[10]
Rvar_set[11]
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
n = 101
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Transform random numbers to random variables from exp(lambda = 13/60) distrubution
lambda = 20/60 # cust/min
Rvar_set = qexp(Rnum_set, lambda)
# INTER arrival time
Rvar_set
# ARRIVAL times (cummulative)
Rvar_arrival = c()
Rvar_arrival[1] = 0
Rvar_arrival[2] = Rvar_set[1] + Rvar_arrival[1]
for (i in 3:n)Rvar_arrival[i] = Rvar_arrival[i-1]+Rvar_set[i-1]
Rvar_arrival
Rvar_arrival[13]
# Generate a list of random numbers
x = 654321001
a = 7^5
c = 1000007
m = 2^31 - 1
(a*x + c)%%m
Rnum_set[10]
Rvar_set[10]
Rvar_set[11]
Rvar_arrival
?qnorm()
# Generate a list of random numbers
x = 987654321
a = 7^5
c = 100000
m = 2^31 - 1
n = 520
Rnum_set = c()
for (i in 1:n){
x = (a*x + c)%%m
R = x/m
Rnum_set[i] = R
}
# Transform random numbers to random variables from exp(lambda = 13/60) distrubution
lambda = 60/13 # arrivals/hour
Rvar_set = qexp(Rnum_set, lambda)
# INTER arrival time
Rvar_set + Rvar_set
# ARRIVAL times (cummulative)
Rvar_arrival = c(0)
Rvar_arrival[2] = Rvar_set[1]
for (i in 2:n)Rvar_arrival[i] = Rvar_arrival[i-1]+Rvar_set[i]
Rvar_arrival
